:maruku
  # Features

  <!--
  * ToC
  {:toc} -->

  ## Use what you want

  Because of ramaze's modular design, you are free to choose.

  ## ORMs

  * Sequel
  * Data Mapper
  * Active Record
  * M4DBI

  ## Templating Engines

  * Amrita2
  * Erubis
  * Tenjin
  * Haml
  * Sass
  * Liquid
  * Markaby
  * Remarkably
  * Ezamar
  * Nagoro
  * XSLT

  ## Adapters

  * Mongrel
  * Evented Mongrel
  * Swiftiplied Mongrel
  * WEBrick
  * FCGI
  * CGI
  * SCGI
  * LiteSpeed
  * Thin
  * Ebb

  ## Loggers

  * LogHub
  * Informer
  * Growl
  * Analogger
  * Syslog
  * KNotify
  * XOSD

  ## Keep it simple

  Ramaze has minimum dependencies, many applications will require only
  [Ruby](http://ruby-lang.org) and [Rack](http://rack.rubyforge.org) to run. 
  Of course you can take advantage of several wonderful libraries and
  deployment options (webservers, proxies), but Ramaze is built in a
  lightweight manner to eliminate waste.

  ## Ruby Implementations

  * [MRI](http://ruby-lang.org) 1.8.x and 1.9.1
  * [JRuby](http://jruby.codehaus.org/) 1.x
  * [Rubinius](http://rubini.us/)

  ## Everything documented

  Classes, Modules, Methods, Configuration...

  Through **100% documentation** Ramaze gives the developer easy and solid
  understanding of the underlying concepts and functionality.

      # One iteration of rotate will look for files that changed since the last
      # iteration and will try to #safe_load it.
      # This method is quite handy if you want direct control over when your
      # code is reloaded.
      #
      # Usage example:
      #
      #   trap :HUP do
      #     Ramaze::Log.info "reloading source"
      #     Thread.main[:sourcereload].rotate
      #   end
  {: lang=ruby}


  ## Fully BDD

  Ramaze has a very complete set of test specifications built by
  [Bacon](http://github.com/chneukirchen/bacon/tree/master).
  These specs define the way Ramaze has to behave.

  The specs are checked every time a new patch is pushed into the repository,
  deciding whether the changes the patch applies are valid and don\'t
  break the framework.


      describe MainController do
        behaves_like 'http', 'xpath'
        ramaze

        it 'should show start page' do
          got = get('/')
          got.status.should == 200
          got.header['Content-Type'].should == 'text/html'
          got.at('//title').text.strip.should == MainController.new.index
        end
      end
  {: lang=ruby}
  The behaves\_like declaration enables a specification to inherit shared
  behaviors.
  For more information, see the Bacon documentation.
