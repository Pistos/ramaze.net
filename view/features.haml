:maruku
  # Features

  * ToC
  {:toc}

  ## Use what you want

  Because of ramaze's **modular design**, You are free to choose

  * ORMs
  * Template Engines
  * Adapters
  * Loggers

  ## ORMs

  * Sequel
  * Data Mapper
  * Active Record
  * M4DBI

  ## Template Engines

  * Amrita2
  * Erubis
  * Tenjin
  * Haml
  * Sass
  * Liquid
  * Markaby
  * Remarkably
  * Ezamar
  * Nagoro
  * XSLT

  ## Adapters

  * Thin
  * Mongrel
  * Evented Mongrel
  * Swifiplied Mongrel
  * WEBrick
  * CGI
  * FCGI

  ## Loggers

  * LogHub
  * Informer
  * Analogger
  * Syslog
  * KNotify
  * XOSD

  ## Keep it simple

  Ramaze has minimum dependencies that **only needs Ruby** to run. Of
  course you can take advantage of several wonderful libraries, but
  Ramaze is built in a way to be run on any basic setup.

  ## Ruby Implementations

  * MRI 1.8 and 1.9
  * JRuby 1.x
  * Rubinius

  ## Everything documented

  Classes, Modules, Methods, Configuration...

  Through **100% documentation** Ramaze gives the developer easy and solid
  understanding of the underlying concepts and functionality.

      # One iteration of rotate will look for files that changed since the last
      # iteration and will try to #safe_load it.
      # This method is quite handy if you want direct control over when your
      # code is reloaded.
      #
      # Usage example:
      #
      #   trap :HUP do
      #     Ramaze::Log.info "reloading source"
      #     Thread.main[:sourcereload].rotate
      #   end
  {: lang=ruby}


  ## Fully BDD

  Ramaze has a very complete set of so-called specifications built by RSpec.
  These specs define the way Ramaze has to behave.

  The specs are checked every time a new patch is pushed into the repository,
  deciding whether the changes the patch applies are valid and don\'t
  break the framework.

      describe "get files" do
        behaves_like 'http'

        it "binary" do
          image_path = '/favicon.ico'
          if RUBY_VERSION >= '1.9.0'
            static_image = File.open("spec/ramaze/public\#{image_path}",
                                   'r:ASCII'){|f| f.read}
          else
            static_image = File.read("spec/ramaze/public\#{image_path}")
          end
          ......
  {: lang=ruby}
